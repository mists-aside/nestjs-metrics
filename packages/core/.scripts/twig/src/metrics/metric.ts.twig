import {Provider} from '@nestjs/common';

import {{'{'}}{{metricType|capitalize}}Adapter} from '../adapters';

import {
  AdapterKinds,
  {% if metricType in ['counter', 'gauge' ] %} CountableOptions,{% endif %}
  {% if metricType == 'counter' %} ObservableOptions,{% endif %}
  {{metricType|capitalize}}
} from '../interfaces';

import {Metric} from './metric';

{% if metricType in ['histogram', 'summary' ] %}
import {TimingMetricOptions} from './gauge';
{% endif %}


{% if metricType == 'gauge' %}
import {CountableMetricOptions} from './counter';
{% endif %}

{% if metricType != 'counter' %}
import {EndTimerMethod} from '../interfaces';
import {MetricOptions, ObservableMetricOptions} from './counter';
{% endif %}

{% if metricType == 'counter' %}
export interface MetricOptions {
  adapter?: AdapterKinds;
  metric?: string;
}

export type CountableMetricOptions = CountableOptions & MetricOptions;

export type ObservableMetricOptions = ObservableOptions & MetricOptions;
{% endif %}

{% if metricType == 'gauge' %}
export type TimingMetricOptions = Omit{{'<'}}CountableOptions, 'delta'{{'>'}} & MetricOptions;
{% endif %}

export class {{metricType|capitalize}}Metric extends Metric implements {{metricType|capitalize}} {
  metricKind: '{{metricType}}' = '{{metricType}}';

  protected static instance: {{metricType|capitalize}}Metric;

  static getInstance(): {{metricType|capitalize}}Metric {
    if (!{{metricType|capitalize}}Metric.instance) {
      {{metricType|capitalize}}Metric.instance = new {{metricType|capitalize}}Metric();
    }
    return {{metricType|capitalize}}Metric.instance;
  }

  static getProvider(): Provider<{{metricType|capitalize}}Metric> {
    return {
      provide: {{metricType|capitalize}}Metric,
      useValue: {{metricType|capitalize}}Metric.getInstance(),
    };
  }

  {{methods|join('\n\n')}}

  protected {{metricType}}Adapters(adapter?: AdapterKinds, metric?: string): {{metricType|capitalize}}Adapter[] {
    return this.searchAdapters({metricKind: '{{metricType}}'})
      .filter((item) => (adapter ? item.adapter.adapterKind === adapter : true))
      .filter((item) => (metric ? item.metric === metric : true))
      .map((item) => item.adapter as {{metricType|capitalize}}Adapter);
  }
}
