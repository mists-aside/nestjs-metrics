/** will {{metricMethod}}() for all adapters */
public async {{metricMethod}}AllAdapters(): Promise{{'<'}}EndTimerMethod{{'>'}} {
  const endTimer = this.{{metricType}}.{{metricMethod}}();
  await new Promise(resolve => setTimeout(resolve, 200));
  return endTimer;
}

/** will {{metricMethod}}() for specific adapter */
public async {{metricMethod}}ByAdapter(adapter: AdapterKinds): Promise{{'<'}}EndTimerMethod{{'>'}} {
  const endTimer = this.{{metricType}}.{{metricMethod}}({
    adapter,
  });
  await new Promise(resolve => setTimeout(resolve, 200));
  return endTimer;
}

/** will {{metricMethod}}() for specific metricName */
public async {{metricMethod}}ByMetric(metric: string): Promise{{'<'}}EndTimerMethod{{'>'}} {
  const endTimer = this.{{metricType}}.{{metricMethod}}({
    metric,
  });
  await new Promise(resolve => setTimeout(resolve, 200));
  return endTimer;
}

/** will {{metricMethod}}() with tags */
public async {{metricMethod}}WithTags(): Promise{{'<'}}EndTimerMethod{{'>'}} {
  const endTimer = this.{{metricType}}.{{metricMethod}}({
    tags: { tag: '{{metricType}}' }
  });
  await new Promise(resolve => setTimeout(resolve, 200));
  return endTimer;
}

/** will {{metricMethod}}() with tags */
public async {{metricMethod}}WithEndTags(): Promise{{'<'}}EndTimerMethod{{'>'}} {
  const endTimer = this.{{metricType}}.{{metricMethod}}();
  await new Promise(resolve => setTimeout(resolve, 200));
  endTimer({
    tags: { tag: '{{metricType}}' }
  });
  return endTimer;
}

@MetricTiming({adapter: 'prometheus'}, {metricKind: '{{metricType}}'})
public async {{metricMethod}}WithDecorator(): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 200));
}
