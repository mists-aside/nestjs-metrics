/** will {{adapterMethod}}rement all adapters */
public {{adapterMethod}}AllAdapters(): void {
  this.counter.{{adapterMethod}}();
}

/** will {{adapterMethod}}rement only prometheus adapters */
public {{adapterMethod}}ByAdapter(adapter: AdapterKinds): void {
  this.counter.{{adapterMethod}}({
    adapter,
  });
}

/** will {{adapterMethod}}rement only adapters with a specific label  */
public {{adapterMethod}}ByMetricLabel(metric: string): void {
  this.counter.{{adapterMethod}}({
    metric,
  });
}

/** will {{adapterMethod}}rement using different delta */
public {{adapterMethod}}WithDelta(): void {
  this.counter.{{adapterMethod}}({
    delta: 2,
  });
}

/** will {{adapterMethod}}rement using tags */
public {{adapterMethod}}WithDeltaAndTags(): void {
  this.counter.{{adapterMethod}}({
    delta: 2,
    tags: {tag: 'counter'},
  });
}

/** will increment using decorator */
@EventIncrement()
public async {{adapterMethod}}WithDecorator(): Promise<void> {
  await new Promise((resolve) => setTimeout(resolve, 500));
}
