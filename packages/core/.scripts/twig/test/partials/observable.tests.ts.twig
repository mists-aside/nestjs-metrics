// {{metricMethod}}

it('{{controllerClass}}.{{metricMethod}}AllAdapters() should trigger {{metricMethod}}() function on all {{metricType}} adapters', () => {
  controller.{{metricMethod}}AllAdapters();
  expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.called;
  expect({{metricType}}Statsd.{{metricMethod}}).to.have.been.called;
});

it('{{controllerClass}}.{{metricMethod}}ByAdapter() should trigger {{metricMethod}}() function on all `prometheus` {{metricType}} adapters', () => {
  controller.{{metricMethod}}ByAdapter('prometheus');
  expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.calledWith({delta: 1, tags: undefined});
  expect({{metricType}}Statsd.{{metricMethod}}).to.not.have.been.called;
});

it('{{controllerClass}}.{{metricMethod}}ByMetric() should trigger {{metricMethod}}() function on all `{{metricType}}` {{metricType}} adapters', () => {
  controller.{{metricMethod}}ByMetric(metricName);
  expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.calledWith({delta: 1, tags: undefined});
  expect({{metricType}}Statsd.{{metricMethod}}).to.have.been.called;
});

it('{{controllerClass}}.{{metricMethod}}WithTags() should trigger {{metricMethod}}() function using {tag: `{{metricType}}`}', () => {
  controller.{{metricMethod}}WithTags();
  expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.calledWith({delta: 2, tags: {tag: '{{metricType}}'}});
});

// // TODO: Determine why this isn't working (manual test does)
// it.skip('{{controllerClass}}.incWithDecorator() should trigger inc() function using a decorator', async () => {
//   await controller.incWithDecorator();

//   expect({{metricType}}Prometheus.inc).to.have.been.called;
//   expect({{metricType}}Statsd.inc).to.not.have.been.called;
// });
