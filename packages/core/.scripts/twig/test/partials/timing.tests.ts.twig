it('{{controllerClass}}.timeByAdapter() should trigger {{metricMethod}}() function on all `prometheus` {{metricType}} adapters', async () => {
  await controller.timeByAdapter('prometheus');
  expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.calledWith({tags: undefined});
  expect({{metricType}}Statsd.{{metricMethod}}).to.not.have.been.called;
});

it('{{controllerClass}}.timeByMetric() should trigger {{metricMethod}}() function on all `{{metricType}}` {{metricType}} adapters', async () => {
  await controller.timeByMetric(metricName);
  expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.calledWith({tags: undefined});
  expect({{metricType}}Statsd.{{metricMethod}}).to.have.been.called;
});

it('{{controllerClass}}.timeWithTags() should trigger {{metricMethod}}() function using {tag: `{{metricType}}`}', async () => {
  await controller.timeWithTags();
  expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.calledWith({tags: {tag: '{{metricType}}'}});
});

it('{{controllerClass}}.timeWithEndTags() should trigger {{metricMethod}}() function using {tag: `{{metricType}}`}', async () => {
  await controller.timeWithEndTags();
  expect(endTimer).to.have.been.calledWith({tags: {tag: '{{metricType}}'}});
});

// // TODO: Determine why this isn't working (manual test does)
// it.skip('{{controllerClass}}.incWithDecorator() should trigger inc() function using a decorator', async () => {
//   await controller.incWithDecorator();

//   expect({{metricType}}Prometheus.inc).to.have.been.called;
//   expect({{metricType}}Statsd.inc).to.not.have.been.called;
// });
