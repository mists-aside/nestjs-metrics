// reset

describe('{{metricMethod}}()', () => {
  it('{{controllerClass}}.resetByAdapter() should trigger reset() function on all {{metricType}} adapters', () => {
    controller.resetAllAdapters();
    expect({{metricType}}Prometheus.reset).to.have.been.called;
    expect({{metricType}}Statsd.reset).to.have.been.called;
  });

  it(`{{controllerClass}}.resetByAdapter('prometheus') should trigger reset() function on all 'prometheus' {{metricType}} adapters`, () => {
    controller.resetByAdapter('prometheus');
    expect({{metricType}}Prometheus.reset).to.have.been.called;
    expect({{metricType}}Statsd.reset).to.not.have.been.called;
  });

  it(`{{controllerClass}}.resetByMetricName('${metricName}') should trigger reset() function on all {{metricType}} adapters`, () => {
    controller.resetByMetricName(metricName);
    expect({{metricType}}Prometheus.reset).to.have.been.called;
    expect({{metricType}}Statsd.reset).to.have.been.called;
  });

  it('{{controllerClass}}.{{metricMethod}}WithDecorator() should trigger {{metricMethod}}() function using a decorator', async () => {
    await controller.{{metricMethod}}WithDecorator();

    expect({{metricType}}Prometheus.{{metricMethod}}).to.have.been.called;
    expect({{metricType}}Statsd.{{metricMethod}}).to.not.have.been.called;
  });
});
