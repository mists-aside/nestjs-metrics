/* eslint-disable mocha/no-mocha-arrows */
// import { incValues, incValuesDelta, decValuesDelta } from './../src/test/utils/controllers';
import * as chai from 'chai';
import {describe, it} from 'mocha';
import {nanoid} from 'nanoid';
import * as sinon from 'sinon';
import * as sinonChai from 'sinon-chai';

import {GaugeMetric} from '../src';
import {Config} from '../src/config';
import {{'{'}}{{controllerClass}}{{'}'}} from '../src/test';
import {GaugePrometheus, GaugeStatsd, TestHarness, createTestModule} from './utils';
import {endTimer} from './utils/adapters';

chai.use(sinonChai);
const expect = chai.expect;

const metricName = nanoid();

const {{metricType}}Prometheus = new GaugePrometheus();
const {{metricType}}Statsd = new GaugeStatsd();

const metricAdapters = [
  {
    adapter: {{metricType}}Prometheus,
    metric: metricName,
  },
  {
    adapter: {{metricType}}Statsd,
    metric: metricName,
  },
];

// eslint-disable-next-line mocha/no-skipped-tests
describe('src/metric', function () {
  before(() => {
    Config.getInstance().clear();
    Config.getInstance().addAdapters(metricAdapters);
  });

  describe('Controller(Metric::GaugeMetric)', () => {
    let harness: TestHarness;
    let controller: GaugeMetricController;
    let sandbox: sinon.SinonSandbox;

    beforeEach(async () => {
      sandbox = sinon.createSandbox();
      sandbox.spy({{metricType}}Prometheus, 'dec');
      sandbox.spy({{metricType}}Prometheus, 'inc');
      sandbox.spy({{metricType}}Prometheus, 'set');
      sandbox.spy({{metricType}}Prometheus, 'startTimer');
      sandbox.spy({{metricType}}Statsd, 'dec');
      sandbox.spy({{metricType}}Statsd, 'inc');
      sandbox.spy({{metricType}}Statsd, 'set');
      sandbox.spy({{metricType}}Statsd, 'startTimer');

      harness = await createTestModule(
        {
          adapters: [],
        },
        {
          controllers: [{{controllerClass}}],
          providers: [GaugeMetric.getProvider()],
        },
      );

      controller = harness.app.get{{'<'}}{{controllerClass}}{{'>('}}{{controllerClass}}{{')'}};
    });

    afterEach(async () => {
      await harness.app.close();

      harness = undefined;
      controller = undefined;

      sandbox.restore();
      sandbox = undefined;
    });

    // dec

    {{decTests}}

    // inc

    {{incTests}}

    // set

    {{setTests}}

    // startTimer

    {{timingTests}}

    it('generic', () => {
      expect(true).to.equal(true);
    });
  });

  it('generic', () => {
    expect(true).to.equal(true);
  });
});
